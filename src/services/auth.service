// ===== 第二步：创建身份验证服务 =====
// src/services/auth.service.ts

import jwt from 'jsonwebtoken';
import User, { IUser } from '../models/user.model';
import { ConflictError, NotFoundError, UnauthorizedError } from '../utils/errors';

export interface RegisterDTO {
  username: string;
  password: string;
  email: string;
  role?: string;
}

export interface LoginDTO {
  username: string;
  password: string;
}

export interface UserResponse {
  id: string;
  username: string;
  email: string;
  role: string;
  displayName?: string;
  avatar?: string;
  isActive: boolean;
  createdAt: Date;
  updatedAt: Date;
  lastLoginAt?: Date;
}

export interface AuthResponse {
  user: UserResponse;
  token: string;
}

class AuthService {
  /**
   * 用户注册
   */
  async register(userData: RegisterDTO): Promise<AuthResponse> {
    // 检查用户名或邮箱是否已存在
    const existingUser = await User.findOne({
      $or: [{ username: userData.username }, { email: userData.email }],
    });

    if (existingUser) {
      throw new ConflictError('用户名或邮箱已存在');
    }

    // 创建新用户
    const newUser = new User({
      username: userData.username,
      password: userData.password,
      email: userData.email,
      role: userData.role || 'reviewer',
    });

    await newUser.save();

    // 生成JWT令牌
    const token = this.generateToken(newUser);

    // 返回用户信息和令牌
    return {
      user: this.formatUserResponse(newUser),
      token,
    };
  }

  /**
   * 用户登录
   */
  async login(credentials: LoginDTO): Promise<AuthResponse> {
    // 查找用户
    const user = await User.findOne({ username: credentials.username });

    if (!user) {
      throw new UnauthorizedError('用户名或密码不正确');
    }

    // 验证密码
    const isPasswordValid = await user.comparePassword(credentials.password);

    if (!isPasswordValid) {
      throw new UnauthorizedError('用户名或密码不正确');
    }

    // 更新最后登录时间
    user.lastLoginAt = new Date();
    await user.save();

    // 生成JWT令牌
    const token = this.generateToken(user);

    // 返回用户信息和令牌
    return {
      user: this.formatUserResponse(user),
      token,
    };
  }

  /**
   * 根据ID获取用户信息
   */
  async getUserById(userId: string): Promise<UserResponse | null> {
    const user = await User.findById(userId);

    if (!user) {
      return null;
    }

    return this.formatUserResponse(user);
  }

  /**
   * 验证JWT令牌
   */
  async validateToken(token: string): Promise<UserResponse> {
    try {
      const payload = jwt.verify(token, process.env.JWT_SECRET!) as { sub: string };
      const user = await User.findById(payload.sub);

      if (!user) {
        throw new UnauthorizedError('无效的令牌');
      }

      return this.formatUserResponse(user);
    } catch (error) {
      throw new UnauthorizedError('无效的令牌');
    }
  }

  /**
   * 生成JWT令牌
   */
  private generateToken(user: IUser): string {
    const payload = {
      sub: user._id,
      username: user.username,
      role: user.role,
    };

    return jwt.sign(payload, process.env.JWT_SECRET!, {
      expiresIn: process.env.JWT_EXPIRES_IN || '24h',
    });
  }

  /**
   * 格式化用户响应
   */
  private formatUserResponse(user: IUser): UserResponse {
    return {
      id: user._id.toString(),
      username: user.username,
      email: user.email,
      role: user.role,
      displayName: user.displayName,
      avatar: user.avatar,
      isActive: user.isActive,
      createdAt: user.createdAt,
      updatedAt: user.updatedAt,
      lastLoginAt: user.lastLoginAt,
    };
  }
}

export default new AuthService();
